# Extract text from each article
text <- list()
for (url in URLs) {
jump <- session %>%
session_jump_to(url)  # Jump to each URL logged in
html <- read_html(jump) %>%
html_nodes("article") %>%
html_nodes("section") %>%
html_nodes("p")
text <- rbind(text, toString(html))
}
# Remove HTML code and everything but letters
text <- text %>%
str_remove_all("<span.*?p>") %>%
str_replace_all("<p", "") %>%
str_replace_all("</p>", "") %>%
str_remove_all("<a.*?>") %>%
str_replace_all("[^[[:alpha:]][[:space:]]]", "") %>%
str_remove("classcarouselitemtxt carouseljobbsearchnarrowitemtxt\n                                a\n")
# Make a data frame with dates, URLs and text from each article
text = as.data.frame(text)
text$date = url.list$Dates
text$url = url.list$URLs
# Get the names of the companies we have stock price data for
companies = unique(stocks$company)
# Get the names of the companies we have stock price data for
companies = unique(stocks$Company)
# Trying to create a nice data frame for the results
df = data.frame(matrix(ncol = length(companies)+1,nrow = nrow(text)))
mycols = c("date",companies)
colnames(df) = mycols
df$date = text$date
# Which articles have company mentions?
# Creates an object for each article that has a company mention (don't know why this doesn't work anymore)
for(i in 1:nrow(text)){
for(j in 1:length(companies)){
ifelse(str_detect(text$text[i],companies[j]),    # If the company name j is in article i
assign(paste(companies[j],text$date[i],sep="-"),text$text[i]),    # Yes: Create an object with the article
assign(paste("NA",companies[j],text$date[i],sep="-"),text$text[i]))    # No: Create an object with the article with NA in the front
rm(list = ls(pattern = "^NA"))    # Delete the NA objects
}
# Get the names of the companies we have stock price data for
companies = unique(stocks$Company)
View(all.firms)
View(stocks)
# Put company names into "stocks" dataframe for searching purposes
stocks$company = full_join(stocks,all.firms,by="ticker")
as.data.frame(stocks)
# Convert stock information into a data frame
stocks = stocks$df.tickers
# Add company name (for searching purposes maybe?)
stocks = left_join(stocks,firms,by="ticker")
# Add company name (for searching purposes maybe?)
stocks = left_join(stocks,all.firms,by="ticker")
# Calculate a daily price measure
for(i in 1:length(stocks)){
stocks$av.price[i] = (stocks$price.open[i]+stocks$price.close[i])/2
}
# Get the names of the companies we have stock price data for
companies = unique(stocks$Company)
# Trying to create a nice data frame for the results
df = data.frame(matrix(ncol = length(companies)+1,nrow = nrow(text)))
mycols = c("date",companies)
colnames(df) = mycols
df$date = text$date
# Which articles have company mentions?
# Creates an object for each article that has a company mention (don't know why this doesn't work anymore)
for(i in 1:nrow(text)){
for(j in 1:length(companies)){
ifelse(str_detect(text$text[i],companies[j]),    # If the company name j is in article i
assign(paste(companies[j],text$date[i],sep="-"),text$text[i]),    # Yes: Create an object with the article
assign(paste("NA",companies[j],text$date[i],sep="-"),text$text[i]))    # No: Create an object with the article with NA in the front
rm(list = ls(pattern = "^NA"))    # Delete the NA objects
}
View(stocks)
url <- "https://en.wikipedia.org/wiki/List_of_companies_listed_on_the_Oslo_Stock_Exchange"
all.firms <- as.data.frame(read_html(url) %>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div[1]/table[2]') %>% #table containing the information
html_table()) #retrieve table
# Change format of first day of listing column
all.firms$First.day.of.listing =
as.Date(all.firms$First.day.of.listing, format= "%d %B %Y")
# Filter to relevant time period
all.firms =
all.firms %>%
filter(First.day.of.listing <= "2019-12-31")
# Were any companies delisted?
url2 = "https://en.wikipedia.org/wiki/List_of_companies_delisted_from_Oslo_Stock_Exchange"
delisted.firms = as.data.frame(read_html(url2) %>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div[1]/table[2]') %>% #table containing the information
html_table()) #retrieve table
inner_join(all.firms,delisted.firms,by = "Company")
# Seems like only Elkem was delisted in or after 2005, the code will automatically
# exclude it since the stock price info will not be available after delisting
# Get tickers
# Manually rename wrong tickers
all.firms$Ticker =
all.firms$Ticker %>%
gsub("AKERBP","AKRBP",.) %>%
gsub("AKA","AKAST",.) %>%
gsub("ARCHER","ARCH",.) %>%
gsub("ASETEK","ASTK",.) %>%
gsub("AVANCE","AGAS",.) %>%
gsub("BEL","BELCO",.) %>%
gsub("BON","BONHR",.) %>%
gsub("BDRILL","BORR",.) %>%
gsub("BOUVET","BOUV",.) %>%
gsub("COV","CONTX",.) %>%
gsub("CRAYON","CRAYN",.) %>%
gsub("FKRAFT","FKRFT",.) %>%
gsub("ITE","ITERA",.) %>%
gsub("NANO","NANOV",.) %>%
gsub("PROTCT","PROT",.) %>%
gsub("REC","RECSI",.) %>%
gsub("SALMON","SACAM",.) %>%
gsub("SBX","GEG",.) %>%
gsub("SRBANK","SRBNK",.) %>%
gsub("STRONG","STRO",.) %>%
gsub("VISTIN","VISTN",.)
# Manually change company names to their more "referred-to" versions
# (Subsea 7 becomes Subsea, Yara international becomes Yara, etc.)
# Remove "*" and "."
all.firms$Company =
all.firms$Company %>%
gsub("Yara International", "Yara",.) %>%
gsub("Subsea 7","Subsea",.) %>%
gsub("Scatec Solar","Scatec",.) %>%
gsub("Lerøy Seafood Group","Lerøy",.) %>%
gsub("Gjensidige Forsikring","Gjensidige",.) %>%
gsub("\\*","",.) %>%
gsub("\\.","",.)
# Edit ticker to be on the format "TICKER.OL"
all.firms$ticker = paste0((gsub("OSE: ","",all.firms$Ticker)),".OL")
# Select relevant columns
all.firms =
all.firms %>%
select(Company,ticker,First.day.of.listing)
# Create vector of tickers
all.tickers = as.vector(all.firms$ticker)
# Using tickers vector to obtain stock data from Yahoo Finance
all.stocks <- BatchGetSymbols(tickers = all.tickers,
first.date = "2005-01-01",
last.date = "2019-12-31",
freq.data = "daily",
do.cache = FALSE
)
# How many companies do we have?
# We originally had 183 tickers for companies, some only had price info for
# <75% of the time period (and was therefore skipped), some tickers didn't have
# any info (deregistered or acquired by other companies and therefore no info)
sum(ifelse(all.stocks$df.control$threshold.decision=="KEEP",1,0))
# Convert stock information into a data frame
stocks = all.stocks$df.tickers
# Add company name (for searching purposes)
stocks = left_join(stocks,all.firms,by="ticker")
View(stocks)
# Calculate a daily price measure
for(i in 1:length(stocks)){
stocks$av.price[i] = (stocks$price.open[i]+stocks$price.close[i])/2
}
# Only select columns we are interested in
stocks =
stocks %>%
select(Company,ticker,"date"=ref.date,av.price)
View(stocks)
stocks$article = NA
for(i in 1:nrow(text)){
for(j in 1:length(companies)){
for(k in 1:nrow(stocks)){
if(stocks$date[k] == text$date[i]){
stocks$article[k] = ifelse(str_detect(text$text[i],companies[j]),
text$text[i],
NA
)
}
View(stocks)
View(text)
?as.Date
class(all.firms$First.day.of.listing)
?BatchGetSymbols
# Edit format of date column
test = as.Date(stocks$date)
test
?as.Date
class(text$date)
text$date = as.Date(url.list$Dates)
text$date = as.Date.character(url.list$Dates)
text$date
text$date = as.Date(url.list$Dates,format="%d.%mm.%yyyy")
text$date
text$date = as.Date(url.list$Dates,format="%d %mm %yyyy")
text$date
text$date = ymd(url.list$Dates)
??ymd
library(lubridate)
text$date = ymd(url.list$Dates)
text$date = as.Date(url.list$Dates, "%m.%d.%Y")
text$date
View(text)
View(url.list)
text$date = as.Date(url.list$Dates, "%d.%m.%Y")
View(text)
View(stocks)
for(i in 1:nrow(text)){
for(j in 1:length(companies)){
for(k in 1:nrow(stocks)){
if(stocks$date[k] == text$date[i]){
stocks$article[k] = ifelse(str_detect(text$text[i],companies[j]),
text$text[i],
NA
)
}
test = full_join(stocks,text,by="date")
View(test)
rm(list = ls(test$article))
View(test)
View(text)
View(stocks)
test = full_join(stocks,text,by="date")
text$most.mentioned.company = NA
for(i in 1:nrow(text)){
for(j in 1:length(companies)){
text$most.mentioned.company[i] =
ifelse(str_detect(text$text[i],companies[j]),
companies[j],
NA
)
}
View(text)
?append
for(i in 1:nrow(text)){
for(j in 1:length(companies)){
text$most.mentioned.company[i] =
ifelse(str_detect(text$text[i],"DNB"),
"DNB",
NA
)
}
mycols = c("text","date","url",companies)
# Trying to create a nice data frame for the results
mycols = c("text","date","url",companies)
df = data.frame(matrix(ncol = length(mycols),nrow = nrow(text)))
colnames(df) = mycols
df$date = text$date
df$text = text$text
df$url = text$url
df$date = text$date
df$text = text$text
df$url = text$url
View(df)
# How many times is each company mentioned in each article?
# DNB test
dnbcols = c("text","date","url","DNB")
dnb.df = data.frame(matrix(ncol = length(mycols),nrow = nrow(text)))
# How many times is each company mentioned in each article?
# DNB test
dnbcols = c("text","date","url","DNB")
dnb.df = data.frame(matrix(ncol = length(mycols),nrow = nrow(text)))
colnames(dnb.df) = dnbcols
dnb.df$text = text$text
dnb.df$url = text$url
dnbcols = c("text","date","url","DNB")
dnb.df = data.frame(matrix(ncol = length(mycols),nrow = nrow(text)))
colnames(dnb.df) = dnbcols
dnb.df$date = text$date
dnb.df$text = text$text
dnb.df$url = text$url
dnb.df = data.frame(matrix(ncol = length(dnbcols),nrow = nrow(text)))
colnames(dnb.df) = dnbcols
dnb.df$date = text$date
dnb.df$text = text$text
dnb.df$url = text$url
View(dnb.df)
dnb = c("DNB")
for(i in 1:nrow(dnb.df)){
for(j in 1:length(dnb)){
for(k in 4:ncol(dnb.df)){
dnb.df[k] = count(str_detect(dnb.df$text[i],dnb[j]))
}
for(i in 1:nrow(dnb.df)){
for(j in 1:length(dnb)){
for(k in 4:ncol(dnb.df)){
dnb.df[k] = ifelse(str_detect(dnb.df$text[i],dnb[j]),1,0)
}
for(i in 1:nrow(dnb.df)){
for(j in 1:length(dnb)){
for(k in 4:ncol(dnb.df)){
dnb.df[k] = ifelse(dnb[j] %in% dnb.df$text[i],1,0)
}
for(i in 1:nrow(dnb.df)){
for(j in 1:length(dnb)){
for(k in 4:ncol(dnb.df)){
dnb.df[j,k] = ifelse(str_detect(dnb.df$text[i],dnb[j]),1,0)
}
for(i in 1:nrow(dnb.df)){
for(j in 1:length(dnb)){
for(k in 4:ncol(dnb.df)){
dnb.df[k,j] = ifelse(str_detect(dnb.df$text[i],dnb[j]),1,0)
}
dnb.df[1,2]
for(i in 1:nrow(dnb.df)){
for(j in 1:length(dnb)){
for(k in 4:ncol(dnb.df)){
dnb.df[j][k] = ifelse(str_detect(dnb.df$text[i],dnb[j]),1,0)
}
dnb.df[4,2]
dnb.df[2,4]
for(i in 1:nrow(dnb.df)){
for(j in 1:length(dnb)){
for(k in 4:ncol(dnb.df)){
dnb.df[i,k] = ifelse(str_detect(dnb.df$text[i],dnb[j]),1,0)
}
for(i in 1:nrow(df)){
for(j in 1:length(companies)){
for(k in 4:ncol(df)){
df[i,k] = ifelse(str_detect(df$text[i],companies[j]),1,0)
}
View(df)
# Which companies are mentioned at all in which articles?
for(i in 1:nrow(df)){
for(j in 1:length(companies)){
for(k in 4:ncol(df)){
df[i,k] = ifelse(str_detect(df$text[i],companies[j]),1,0)
}
# Manually change company names to their more "referred-to" versions
# (Subsea 7 becomes Subsea, Yara international becomes Yara, etc.) (more examples?)
# Remove "*" and ".", remove "ASA"
all.firms$Company =
all.firms$Company %>%
gsub("Yara International", "Yara",.) %>%
gsub("Subsea 7","Subsea",.) %>%
gsub("Scatec Solar","Scatec",.) %>%
gsub("Lerøy Seafood Group","Lerøy",.) %>%
gsub("Gjensidige Forsikring","Gjensidige",.) %>%
gsub("\\*","",.) %>%
gsub("\\.","",.) %>%
gsub(" ASA","",.)
# List of ALL listed companies
url <- "https://en.wikipedia.org/wiki/List_of_companies_listed_on_the_Oslo_Stock_Exchange"
all.firms <- as.data.frame(read_html(url) %>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div[1]/table[2]') %>% #table containing the information
html_table()) #retrieve table
# Change format of first day of listing column
all.firms$First.day.of.listing =
as.Date(all.firms$First.day.of.listing, format= "%d %B %Y")
# Filter to relevant time period
all.firms =
all.firms %>%
filter(First.day.of.listing <= "2019-12-31")
# Were any companies delisted?
url2 = "https://en.wikipedia.org/wiki/List_of_companies_delisted_from_Oslo_Stock_Exchange"
delisted.firms = as.data.frame(read_html(url2) %>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div[1]/table[2]') %>% #table containing the information
html_table()) #retrieve table
inner_join(all.firms,delisted.firms,by = "Company")
# Manually rename wrong tickers
all.firms$Ticker =
all.firms$Ticker %>%
gsub("AKERBP","AKRBP",.) %>%
gsub("AKA","AKAST",.) %>%
gsub("ARCHER","ARCH",.) %>%
gsub("ASETEK","ASTK",.) %>%
gsub("AVANCE","AGAS",.) %>%
gsub("BEL","BELCO",.) %>%
gsub("BON","BONHR",.) %>%
gsub("BDRILL","BORR",.) %>%
gsub("BOUVET","BOUV",.) %>%
gsub("COV","CONTX",.) %>%
gsub("CRAYON","CRAYN",.) %>%
gsub("FKRAFT","FKRFT",.) %>%
gsub("ITE","ITERA",.) %>%
gsub("NANO","NANOV",.) %>%
gsub("PROTCT","PROT",.) %>%
gsub("REC","RECSI",.) %>%
gsub("SALMON","SACAM",.) %>%
gsub("SBX","GEG",.) %>%
gsub("SRBANK","SRBNK",.) %>%
gsub("STRONG","STRO",.) %>%
gsub("VISTIN","VISTN",.)
# Manually change company names to their more "referred-to" versions
# (Subsea 7 becomes Subsea, Yara international becomes Yara, etc.) (more examples?)
# Remove "*" and ".", remove "ASA"
all.firms$Company =
all.firms$Company %>%
gsub("Yara International", "Yara",.) %>%
gsub("Subsea 7","Subsea",.) %>%
gsub("Scatec Solar","Scatec",.) %>%
gsub("Lerøy Seafood Group","Lerøy",.) %>%
gsub("Gjensidige Forsikring","Gjensidige",.) %>%
gsub("\\*","",.) %>%
gsub("\\.","",.) %>%
gsub(" ASA","",.)
# Edit ticker to be on the format "TICKER.OL"
all.firms$ticker = paste0((gsub("OSE: ","",all.firms$Ticker)),".OL")
# Select relevant columns
all.firms =
all.firms %>%
select(Company,ticker,First.day.of.listing)
# Create vector of tickers
all.tickers = as.vector(all.firms$ticker)
# How many companies do we have? (95)
# We originally had 183 tickers for companies, some only had price info for
# <75% of the time period (and was therefore skipped), some tickers didn't have
# any info (deregistered or acquired by other companies and therefore no info)
sum(ifelse(all.stocks$df.control$threshold.decision=="KEEP",1,0))
# Convert stock information into a data frame
stocks = all.stocks$df.tickers
# Add company name (for searching purposes)
stocks = left_join(stocks,all.firms,by="ticker")
# Calculate a daily price measure
for(i in 1:length(stocks)){
stocks$av.price[i] = (stocks$price.open[i]+stocks$price.close[i])/2
}
# Only select columns we are interested in
stocks =
stocks %>%
select(Company,ticker,"date"=ref.date,av.price)
# Get the names of the companies we have stock price data for
companies = unique(stocks$Company)
# Create a nice data frame for the results
mycols = c("text","date","url",companies)
df = data.frame(matrix(ncol = length(mycols),nrow = nrow(text)))
colnames(df) = mycols
df$date = text$date
df$text = text$text
df$url = text$url
# Which companies are mentioned at all in which articles?
for(i in 1:nrow(df)){
for(j in 1:length(companies)){
for(k in 4:ncol(df)){
df[i,k] = ifelse(str_detect(df$text[i],companies[j]),1,0)
}
View(df)
# Which articles have company mentions?
# Creates an object for each article that has a company mention
for(i in 1:nrow(text)){
for(j in 1:length(companies)){
ifelse(str_detect(text$text[i],companies[j]),    # If the company name j is in article i
assign(paste(companies[j],text$date[i],sep="-"),text$text[i]),    # Yes: Create an object with the article
assign(paste("NA",companies[j],text$date[i],sep="-"),text$text[i]))    # No: Create an object with the article with NA in the front
rm(list = ls(pattern = "^NA"))    # Delete the NA objects
}
for(i in 1:nrow(text)){
for(j in 1:length(companies)){
ifelse(str_detect(text$text[i],companies[j]),    # If the company name j is in article i
assign(paste(companies[j]),data.frame(text$text[i],text$date[i])),    # Yes: Create an object with the article
assign(paste("NA",companies[j],text$date[i],sep="-"),text$text[i]))    # No: Create an object with the article with NA in the front
rm(list = ls(pattern = "^NA"))    # Delete the NA objects
}
View(DNB)
# Which articles have company mentions?
# Creates an object for each article that has a company mention
# I know this works because articles 19 and 20 mention DNB, and there are two
# DNB-objects in environment
for(i in 1:nrow(text)){
for(h in 1:ncol(text)){
for(j in 1:length(companies)){
ifelse(str_detect(text$text[i],companies[j]),    # If the company name j is in article i
assign(paste(companies[j]),data.frame(text$text[i,h],text$date[i,h])),    # Yes: Create an object with the article
assign(paste("NA",companies[j],text$date[i],sep="-"),text$text[i]))    # No: Create an object with the article with NA in the front
rm(list = ls(pattern = "^NA"))    # Delete the NA objects
}
# Which articles have company mentions?
# Creates an object for each article that has a company mention
# I know this works because articles 19 and 20 mention DNB, and there are two
# DNB-objects in environment
for(i in 1:nrow(text)){
for(j in 1:length(companies)){
ifelse(str_detect(text$text[i],companies[j]),    # If the company name j is in article i
assign(paste(companies[j]),text$date[i],sep="-"),data.frame(text$text[i],text$date[i]),    # Yes: Create an object with the article
assign(paste("NA",companies[j],text$date[i],sep="-"),text$text[i]))    # No: Create an object with the article with NA in the front
rm(list = ls(pattern = "^NA"))    # Delete the NA objects
}
for(i in 1:nrow(text)){
for(j in 1:length(companies)){
ifelse(str_detect(text$text[i],companies[j]),    # If the company name j is in article i
assign(paste(companies[j]),text$date[i],sep="-"),data.frame(text$text[i],text$date[i]),    # Yes: Create an object with the article
assign(paste("NA",companies[j],text$date[i],sep="-"),text$text[i]))    # No: Create an object with the article with NA in the front
rm(list = ls(pattern = "^NA"))    # Delete the NA objects
}
# Which articles have company mentions?
# Creates an object for each article that has a company mention
# I know this works because articles 19 and 20 mention DNB, and there are two
# DNB-objects in environment
for(i in 1:nrow(text)){
for(j in 1:length(companies)){
ifelse(str_detect(text$text[i],companies[j]),    # If the company name j is in article i
assign(paste(companies[j],text$date[i],sep="-"),text$text[i]),    # Yes: Create an object with the article
assign(paste("NA",companies[j],text$date[i],sep="-"),text$text[i]))    # No: Create an object with the article with NA in the front
rm(list = ls(pattern = "^NA"))    # Delete the NA objects
}
text$date
dnbcols = c("text","date","url","DNB")
dnb.df = data.frame(matrix(ncol = length(dnbcols),nrow = nrow(text)))
colnames(dnb.df) = dnbcols
dnb.df$date = text$date
dnb.df$text = text$text
dnb.df$url = text$url
dnb = c("DNB")
for(i in 1:nrow(dnb.df)){
for(j in 1:length(dnb)){
for(k in 4:ncol(dnb.df)){
dnb.df[i,k] = ifelse(str_detect(dnb.df$text[i],dnb[j]),1,0)
}
View(dnb.df)
# Which companies are mentioned at all in which articles?
for(i in 1:nrow(df)){
for(j in 1:length(companies)){
for(k in 4:ncol(df)){
df[i,k] = ifelse(str_detect(df$text[i],companies[j]),1,0)
}
View(df)
